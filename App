package de.hdm_stuttgart.mi.se2.mastermind;

import java.io.File;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import de.hdm_stuttgart.mi.se2.mastermind.exceptions.FileReadErrorException;
import de.hdm_stuttgart.mi.se2.mastermind.gui.SceneManager;
import de.hdm_stuttgart.mi.se2.mastermind.gui.UIUtil;
import de.hdm_stuttgart.mi.se2.mastermind.gui.scenes.ConfigScene;
import de.hdm_stuttgart.mi.se2.mastermind.gui.scenes.FirstTimeNoteScene;
import de.hdm_stuttgart.mi.se2.mastermind.gui.scenes.GameScene;
import de.hdm_stuttgart.mi.se2.mastermind.gui.scenes.HighscoreScene;
import de.hdm_stuttgart.mi.se2.mastermind.gui.scenes.LoseScene;
import de.hdm_stuttgart.mi.se2.mastermind.gui.scenes.MenuScene;
import de.hdm_stuttgart.mi.se2.mastermind.gui.scenes.SuccessScene;
import de.hdm_stuttgart.mi.se2.mastermind.interfaces.IFileManager;
import de.hdm_stuttgart.mi.se2.mastermind.manager.JAXBFileManager;
import javafx.application.Application;
import javafx.stage.Stage;
import javafx.stage.FileChooser.ExtensionFilter;

public class App extends Application {

	public static final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
	public static final ExtensionFilter extFilter = new ExtensionFilter(UIUtil.getI18NString("app.title") + "-Binary files (*.mmb)", "*.mmb");
	private static ScheduledFuture<?> future;
	private static App instance;
	private static final Logger log = LogManager.getLogger(App.class);
	private static IFileManager<Config> configFileManager = new JAXBFileManager<>(Config.class, new File("config.xml"));
	private SceneManager sceneManager;

	public static void main(String[] args) {
		// FileManagement.setConfig();
		log.info("Starting " + UIUtil.getI18NString("app.title"));
		launch(App.class, args);
		App.stopExecutor();
		log.info("Stopped " + UIUtil.getI18NString("app.title"));
	}

	public static void pauseExecutor() {
		if (null != future) {
			future.cancel(true);
			log.info("Autosave stopped temporarily.");
		} else {
			log.warn("ScheduledFuture was null.");
	}
	}

	public static App getInstance() {
		return instance;
	}

	public static void startExecutor(Runnable task) {
		future = App.executor.scheduleAtFixedRate(task, 10, Config.AUTOSAVE_INTERVAL, TimeUnit.SECONDS);
	}

	public static void stopExecutor() {
		App.executor.shutdown();
		try {
			App.executor.awaitTermination(11, TimeUnit.SECONDS);
			log.debug("Autosave thread: Wait for awaitTermination");
		} catch (InterruptedException e) {
			e.printStackTrace();
			log.error("Autosave thread: awaitTermination got interrupted");
		}
		log.info("Autosave stopped.");
	}

	public static IFileManager<Config> getConfigFileManager() {
		return configFileManager;
	}

	public static Config getConfig() {
		Config c = new Config();

		try {
			Config result = App.getConfigFileManager().read();
			if (null != result) {
				c = result;
			}
		} catch (FileReadErrorException e) {
			log.error(e.getLocalizedMessage() + " Using default settings instead.");
		}

		return c;
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		instance = this;
		this.sceneManager = new SceneManager(primaryStage);
		registerScenes();

		this.sceneManager.showDefaultScene();
	}

	public SceneManager getSceneManager() {
		return sceneManager;
	}

	private void registerScenes() {
		this.sceneManager.registerScene(new MenuScene());
		this.sceneManager.registerScene(new ConfigScene());
		this.sceneManager.registerScene(new GameScene());
		this.sceneManager.registerScene(new FirstTimeNoteScene());
		this.sceneManager.registerScene(new HighscoreScene());
		this.sceneManager.registerScene(new SuccessScene());
		this.sceneManager.registerScene(new LoseScene());
	}

}
